version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: recapify-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-recapify}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-recapify_password}
      POSTGRES_DB: ${POSTGRES_DB:-recapify_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recapify}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recapify-network

  # NestJS Backend
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: recapify-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-recapify}:${POSTGRES_PASSWORD:-recapify_password}@postgres:5432/${POSTGRES_DB:-recapify_db}?schema=public
      DIRECT_URL: postgresql://${POSTGRES_USER:-recapify}:${POSTGRES_PASSWORD:-recapify_password}@postgres:5432/${POSTGRES_DB:-recapify_db}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      SUPABASE_BUCKET: ${SUPABASE_BUCKET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      RESEND_API_KEY: ${RESEND_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server:/app
      - /app/node_modules
      - /app/dist
    command: sh -c "npx prisma migrate deploy && npm run start:prod"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - recapify-network

  # React Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: recapify-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000/api/v1}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - recapify-network

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: recapify-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - recapify-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  recapify-network:
    driver: bridge

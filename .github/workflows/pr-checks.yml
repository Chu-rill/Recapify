name: PR Checks

on:
  pull_request:
    branches: [master]

jobs:
  # Check PR Title
  pr-title-check:
    name: Check PR Title
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          requireScope: false

  # Backend PR Checks
  backend-checks:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linter
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./server/coverage/lcov.info
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend PR Checks
  frontend-checks:
    name: Frontend - Lint & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

  # Docker Build Test
  docker-build-test:
    name: Test Docker Builds
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service == 'backend' && 'server' || 'client' }}
          file: ./${{ matrix.service == 'backend' && 'server' || 'client' }}/Dockerfile
          push: false
          tags: recapify-${{ matrix.service }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Checks
  security-checks:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run npm audit
        working-directory: ./${{ matrix.directory }}
        run: npm audit --audit-level=high
        continue-on-error: true

  # PR Size Check
  pr-size-check:
    name: Check PR Size
    runs-on: ubuntu-latest
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;

            if (total > 1000) {
              core.warning(`This PR is large (${total} lines changed). Consider breaking it into smaller PRs.`);
            }

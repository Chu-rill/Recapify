name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  # Backend Tests and Build
  backend-test-build:
    name: Backend - Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: ./server/dist
          retention-days: 1

  # Frontend Tests and Build
  frontend-test-build:
    name: Frontend - Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3000/api/v1' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ./client/dist
          retention-days: 1

  # Build and Push Docker Images
  docker-build-push:
    name: Docker - Build & Push
    runs-on: ubuntu-latest
    needs: [backend-test-build, frontend-test-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - service: backend
            context: ./server
            dockerfile: ./server/Dockerfile
          - service: frontend
            context: ./client
            dockerfile: ./client/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')
    permissions:
      contents: read
      security-events: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}:${{ github.ref_name }}
          format: "sarif"
          output: "trivy-results-${{ matrix.service }}.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results-${{ matrix.service }}.sarif"

  # Deploy to Production (Optional - configure based on your deployment target)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Example: Deploy to a VM via SSH
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/recapify
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose pull
            docker-compose up -d
            docker system prune -af

      # Alternative: Deploy to Kubernetes
      # - name: Setup kubectl
      #   uses: azure/setup-kubectl@v3
      #
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl config use-context production
      #     kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ github.repository }}-backend:latest
      #     kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ github.repository }}-frontend:latest
      #     kubectl rollout status deployment/backend
      #     kubectl rollout status deployment/frontend

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment:
      name: staging
      url: ${{ secrets.STAGING_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/recapify-staging
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose pull
            docker-compose up -d
            docker system prune -af

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-test-build, frontend-test-build, docker-build-push]
    if: failure()

    steps:
      - name: Send notification
        run: |
          echo "Pipeline failed! Check the logs for details."
          # Add your notification logic here (Slack, Discord, Email, etc.)
